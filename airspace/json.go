package airspace

import(
	"encoding/json"
	"fmt"
	"time"
)

// skypi populates these fields:
//   adsb.CompositeMsg.ReceiverName ("ScottsValley")
//   adsb.Msg.Type                  ("MSG"/"MLAT")
// which are turned into trackfragments:
//   fdb.TrackFragment.DataSystem            (DSADSB/DSMLAT)  <- msg.IsMLAT() - DISCARDED??
//   fdb.TrackFragment.Track[0].DataSource   ("ADSB","MLAT")  <- msg.IsMLAT()
//   fdb.TrackFragment.Track[0].ReceiverName ("ScottsValley") <- msg.ReceiverName
// this gets turned into a ui.AirctaftData:
//   ui.AircraftData.Msg <- compositemsg
//   ui.AircraftData.Source <- generated by hand, in ui/airspaces.go

// for skypi, this is sent out as JSON, with some synthetic fields added:
//   X_DataSource  <- compositemsg.DataSource()
// for fr24, we fetch fields (via fr24.ParseCurrentList) as follows:
//   fdb.FlightSnapshot.Trackpoint.DataSource:   "fr24"        <- hardcoded)
//   fdb.FlightSnapshot.Trackpoint.ReceiverName: ("T-TMLAT2")  <- v[8]
// in the JS UI, the aircraftdata fields are used as follows:
//   ad.Source: pick primary colour (fa, fr24, skypi)
//   ad.X_DataSystem: pick sub-colour (just for skypi - MLAT vs ADSB)
//   printout: ad.Source / ad.Msg.ReceiverName (ad.X_DataSystem)


// As we write the JSON, add some synthetic fields. We cast our object into a fake datatype
// to avoid infinite regress; this works, as it gets collapsed back into the same set of vals.

type FakeAircraftData AircraftData

func (ad AircraftData) MarshalJSON() ([]byte, error) {
	m := ad.Msg

	t := m.GeneratedTimestampUTC

	idSpec := fmt.Sprintf("%s@%d", string(m.Icao24), t.Unix()) //time.Now().Unix())

	if ad.Source == "" { ad.Source = "SkyPi" }
	callsign := m.Callsign
	
	return json.Marshal(struct {
		FakeAircraftData

		X_UrlSkypi        string
		X_UrlDescent      string
		X_UrlFA           string
		X_UrlFR24         string

		X_DataSystem      string
		X_AgeSecs         string  // duration string
	}{
		FakeAircraftData: FakeAircraftData(ad),
		
		X_UrlSkypi: fmt.Sprintf("/fdb/tracks?idspec=%s", idSpec),
		X_UrlDescent: fmt.Sprintf("/fdb/descent?idspec=%s", idSpec),
		X_UrlFA: fmt.Sprintf("http://flightaware.com/live/modes/%s/ident/%s/redirect", string(m.Icao24), callsign),
		X_UrlFR24: fmt.Sprintf("http://www.flightradar24.com/%s", callsign),
		X_DataSystem: m.DataSystem(),
		X_AgeSecs: fmt.Sprintf("%.0f", time.Since(m.GeneratedTimestampUTC).Seconds()),
	})
}
